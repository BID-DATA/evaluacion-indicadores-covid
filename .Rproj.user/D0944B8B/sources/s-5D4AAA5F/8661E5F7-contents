--- 
title: "Evolución de indicadores después de la crisis del COVID-19"
author: "SCL Data"
date: "`r Sys.Date()`"
site: bookdown::bookdown_site
documentclass: book
bibliography: [book.bib, packages.bib]
description: |
  Producir boookdown de indicadores post COVID
link-citations: yes
github-repo: BID-DATA/evaluacion-indicadores-covid.git
url: https://bid-data.github.io/evaluacion-indicadores-covid/
---
```{r include=FALSE, cache=FALSE}
# Codigo general para graficar indicadores: funciones, leer antes de cada capítulo
# Autor: Maria Reyes Retana
# Divsion: SCL-SCL: Investigacion

##### Librerias #####

library(ggplot2)
library(tidyverse)
library(haven)
library(ggrepel)
library(extrafont)
library(Rttf2pt1)
library(geofacet)
library(scales)
library(RColorBrewer)
library(scldataR)
library(plotly)
library(dplyr)
library(purrr)

##### Preliminares y colores #####

colors_pal <- c('#17406D','#0F6FC6','#5FF3CB', '#009DD9','#FEA300', '#A5C249','#176A7B','#0BD0D9',
                '#10CF9B', '#FA5F00','#C8DA92','#CC0066')

barplot(rep(1,length(colors_pal)), col=colors_pal)

countries_color <- sample(colors_pal, 12, replace = FALSE)

countries_color_prom <- c("ARG"= "#17406D", "BOL" = "#17406D","CHL" = "#17406D",
                          "COL" = "#17406D", "CRI" = "#17406D", "ECU" = "#17406D",
                          "MEX" = "#17406D", "PER" = "#17406D", "PRY" = "#17406D", 
                          "SLV" = "#17406D", "Promedio" = "#009DD9", "BRA" = "#17406D")

# agregar región BID

paises <- query_indicator(indicator = 'pobreza', 
                          yearstart = 2019, 
                          yearend =  2020) %>% 
  select(isoalpha3) %>% 
  distinct() %>% 
  mutate(region_bid = case_when(isoalpha3 %in% c("ARG", "BRA", "PRY", "CHL", "URY") ~ "Cono Sur", 
                                isoalpha3 %in% c("BOL", "COL", "ECU", "PER", "VEN") ~ "Grupo Andino", 
                                isoalpha3 %in% c("BHS", "BRB", "GUY", "JAM", "SUR", "TTO") ~ "Caribe", 
                                isoalpha3 %in% c("HTI", "MEX", "PAN", "DOM", "BEL", "CRI", "SLV", "GTM", "HND", "NIC") ~ "Centroamerica", 
                                TRUE ~ "NO"))

colors_regiones <- sample(colors_pal, 5, replace = FALSE)

##### Función para generar promedios #####

grouped_mean <- function(.data, .summary_var, ...) {
  .summary_var <- enquo(.summary_var)
  
  .data %>%
    group_by(...) %>%
    mutate(value = mean(!!.summary_var)) %>% 
    mutate(isoalpha3 = "Promedio", 
           country_name_en = "Average", 
           country_name_es = "Promedio", 
           source = "scldata", 
           se = NA_character_, 
           cv = NA_character_, 
           sample = NA_character_, 
           source_es = "scldata", 
           source_en = 'scldata') %>% 
    arrange(source, year) %>% 
    distinct()
  
}

##### Función gráfica cambios promedios ya con datos #####

ggfun_prom <- function(dat,  x.var, y.var) 
  {
  ggp_prom <- ggplot(dat, aes(x = fct_reorder(x.var, y.var),  fill = x.var)) +
    geom_col(aes(y = y.var)) +
    geom_text(data = dat,
              aes(y =  y.var, label = comma(y.var, accuracy = 0.1)),  
              family = 'Century Gothic', fontface = "bold") +
    labs(title = str_wrap(dat$label_es, 50), y = dat$valuetype) +
    theme(legend.position="none", 
          axis.title.y = element_text(color = "#000f1c", face = "bold", family = 'Century Gothic'),
          axis.title.x = element_blank(), 
          legend.title=element_blank(),panel.background = element_blank(),
          axis.text.x = element_text(angle = 90),
          axis.text = element_text(size = 14, color = "#000f1c", face = "bold", family = 'Century Gothic'),
          legend.text = element_text(size = 10, color = "#000f1c", face = "bold", family = 'Century Gothic'),
          text = element_text(size = 14, color = "#000f1c", face = "bold", family = 'Century Gothic')) +
    scale_fill_manual(values = countries_color_prom)
  
  print(ggp_prom)
}

##### Cambios evolución general #####

ggfun_evo <- function(dat, x.var, y.var){
  ggp_evo <- ggplot(data = dat, aes(x = x.var, 
                                    y = y.var, 
                                    color = region_bid)) +
    geom_line(size=2)+
    facet_wrap(~isoalpha3, scales = 'free_y') +
   # labs(title = str_wrap(dat$label_es, 50), y = dat$valuetype) +
    theme(legend.position="bottom", 
          axis.title.y = element_text(color = "#000f1c", face = "bold", family = 'Century Gothic'),
          axis.title.x = element_blank(), 
          legend.title=element_blank(),panel.background = element_blank(),
          axis.text.x = element_text(angle = 90),
          axis.text = element_text(size = 14, color = "#000f1c", face = "bold", family = 'Century Gothic'),
          legend.text = element_text(size = 10, color = "#000f1c", face = "bold", family = 'Century Gothic'),
          text = element_text(size = 14, color = "#000f1c", face = "bold", family = 'Century Gothic')) +
    scale_color_manual(values = colors_regiones)+
    scale_y_continuous(labels = label_number(accuracy = .01))
  
  print(ggp_evo)
}

##### Gráfica género o una categoría con dos o tres niveles #####

ggfun_one <- function(dat, x.var, y.var, nivel) {
 
ggp_one <- ggplot(dat, aes(x = fct_reorder(x.var, y.var),  fill = nivel)) +
 geom_col(aes(y = y.var), position = "dodge") +
 geom_text(data = dat,
          aes(y =  y.var+.005, label = comma(y.var, accuracy = 0.1)),  
           family = 'Century Gothic', fontface = "bold", 
          position = position_dodge(width = .9), angle = 90) +
  labs(title = str_wrap(dat$label_es, 50), y = dat$valuetype) +
  theme(legend.position="bottom", 
        axis.title.y = element_text(color = "#000f1c", face = "bold", 
                                    family = 'Century Gothic'),
        axis.title.x = element_blank(), 
        legend.title=element_blank(),panel.background = element_blank(),
        axis.text.x = element_text(angle = 90),
        axis.text = element_text(size = 14, color = "#000f1c", face = "bold", 
                                 family = 'Century Gothic'),
        legend.text = element_text(size = 10, color = "#000f1c", face = "bold",
                                   family = 'Century Gothic'),
        text = element_text(size = 14, color = "#000f1c", face = "bold", 
                            family = 'Century Gothic')) +
  scale_fill_manual(values = colors_pal) +
  scale_y_continuous(labels = comma)
  
  print(ggp_one)
  
}

##### Cambios por edad  y promedio #####

ggfun_mul <- function(ggplot, dat){
  
ggp_mul<- ggplot +
  labs(title = str_wrap(dat$label_es, 50), y = dat$valuetype) +
    theme(legend.position="right",
          axis.title.y = element_text(color = "#000f1c", face = "bold", family = 'Century Gothic'),
          axis.title.x = element_blank(),
          legend.title=element_blank(),panel.background = element_blank(),
          axis.text.x = element_text(angle = 90),
          axis.text = element_text(size = 14, color = "#000f1c", face = "bold", family = 'Century Gothic'),
          legend.text = element_text(size = 10, color = "#000f1c", face = "bold", family = 'Century Gothic'),
          text = element_text(size = 14, color = "#000f1c", face = "bold", family = 'Century Gothic')) +
    scale_color_brewer(palette = "Purples") +
    scale_y_continuous(labels = comma) +
    scale_fill_manual(values = countries_color_prom) +
    geom_hline(yintercept = 0)
    
print(ggp_mul)

}
  
```

# Introducción {-}

Este documento detalla el cambio en indicadores relevantes después de la pandemia del COVID-19 para la región de América Latina y el Caribe. El análisis se divide en cinco secciones, una por cada tema de indicador. En particular los indicadores se dividen en:

1. Ingreso
2. Educación
3. Laborales
4. Género

A su vez cada subtema contiene distintos indicadores con múltiples desagregaciones. Específicamente, las desagregaciones disponibles son género, edad, nivel educativo y quintil de ingreso. 

```{r include=FALSE}
# automatically create a bib database for R packages
knitr::write_bib(c(
  .packages(), 'bookdown', 'knitr', 'rmarkdown', 'ggplot2'), 'packages.bib')
```

```{r setup, include=FALSE}

##### R Markdown global options #####

knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, include = TRUE, fig.align = 'center', out.width = '100%')
```

<!--chapter:end:index.Rmd-->


# Pobreza y protección social

Placeholder


### Evolucion
### Cambios promedio
### Por area 
## Vulnerable
### Evolucion
### Cambios promedio
### Por area 
## Gini
### Evolucion
### Cambios promedio
### Por area 
## Remesas
### Evolucion
### Cambios promedio
### Por area 

<!--chapter:end:01-Pobreza-protección-social.Rmd-->


# Educación {#cross}

Placeholder


## Asistencia por edad 
## Asistencia neta 
## Ninis
## Tasa de abandono
## Tasa de sobreedad

<!--chapter:end:02-Educación.Rmd-->


# Mercado laboral

Placeholder


## Tasa de participación
## Tasa de ocupación 
## Tasa desocupación 
## Salario suficiente
## Ingreso laboral: formales e informales
## Duración desempleo
## Empleos sin remuneración
## Pensionistas

<!--chapter:end:03-Mercado-laboral.Rmd-->

```{r include=FALSE, cache=FALSE}
# Codigo general para graficar indicadores: funciones, leer antes de cada capítulo
# Autor: Maria Reyes Retana
# Divsion: SCL-SCL: Investigacion

##### Librerias #####

library(ggplot2)
library(tidyverse)
library(haven)
library(ggrepel)
library(extrafont)
library(Rttf2pt1)
library(geofacet)
library(scales)
library(RColorBrewer)
library(scldataR)
library(plotly)
library(dplyr)
library(purrr)

##### Preliminares y colores #####

colors_pal <- c('#17406D','#0F6FC6','#5FF3CB', '#009DD9','#FEA300', '#A5C249','#176A7B','#0BD0D9',
                '#10CF9B', '#FA5F00','#C8DA92','#CC0066')

barplot(rep(1,length(colors_pal)), col=colors_pal)

countries_color <- sample(colors_pal, 12, replace = FALSE)

countries_color_prom <- c("ARG"= "#17406D", "BOL" = "#17406D","CHL" = "#17406D",
                          "COL" = "#17406D", "CRI" = "#17406D", "ECU" = "#17406D",
                          "MEX" = "#17406D", "PER" = "#17406D", "PRY" = "#17406D", 
                          "SLV" = "#17406D", "Promedio" = "#009DD9", "BRA" = "#17406D")

# agregar región BID

paises <- query_indicator(indicator = 'pobreza', 
                          yearstart = 2019, 
                          yearend =  2020) %>% 
  select(isoalpha3) %>% 
  distinct() %>% 
  mutate(region_bid = case_when(isoalpha3 %in% c("ARG", "BRA", "PRY", "CHL", "URY") ~ "Cono Sur", 
                                isoalpha3 %in% c("BOL", "COL", "ECU", "PER", "VEN") ~ "Grupo Andino", 
                                isoalpha3 %in% c("BHS", "BRB", "GUY", "JAM", "SUR", "TTO") ~ "Caribe", 
                                isoalpha3 %in% c("HTI", "MEX", "PAN", "DOM", "BEL", "CRI", "SLV", "GTM", "HND", "NIC") ~ "Centroamerica", 
                                TRUE ~ "NO"))

colors_regiones <- sample(colors_pal, 5, replace = FALSE)

##### Función para generar promedios #####

grouped_mean <- function(.data, .summary_var, ...) {
  .summary_var <- enquo(.summary_var)
  
  .data %>%
    group_by(...) %>%
    mutate(value = mean(!!.summary_var)) %>% 
    mutate(isoalpha3 = "Promedio", 
           country_name_en = "Average", 
           country_name_es = "Promedio", 
           source = "scldata", 
           se = NA_character_, 
           cv = NA_character_, 
           sample = NA_character_, 
           source_es = "scldata", 
           source_en = 'scldata') %>% 
    arrange(source, year) %>% 
    distinct()
  
}

##### Función gráfica cambios promedios ya con datos #####

ggfun_prom <- function(dat,  x.var, y.var) 
  {
  ggp_prom <- ggplot(dat, aes(x = fct_reorder(x.var, y.var),  fill = x.var)) +
    geom_col(aes(y = y.var)) +
    geom_text(data = dat,
              aes(y =  y.var, label = comma(y.var, accuracy = 0.1)),  
              family = 'Century Gothic', fontface = "bold") +
    labs(title = str_wrap(dat$label_es, 50), y = dat$valuetype) +
    theme(legend.position="none", 
          axis.title.y = element_text(color = "#000f1c", face = "bold", family = 'Century Gothic'),
          axis.title.x = element_blank(), 
          legend.title=element_blank(),panel.background = element_blank(),
          axis.text.x = element_text(angle = 90),
          axis.text = element_text(size = 14, color = "#000f1c", face = "bold", family = 'Century Gothic'),
          legend.text = element_text(size = 10, color = "#000f1c", face = "bold", family = 'Century Gothic'),
          text = element_text(size = 14, color = "#000f1c", face = "bold", family = 'Century Gothic')) +
    scale_fill_manual(values = countries_color_prom)
  
  print(ggp_prom)
}

##### Cambios evolución general #####

ggfun_evo <- function(dat, x.var, y.var){
  ggp_evo <- ggplot(data = dat, aes(x = x.var, 
                                    y = y.var, 
                                    color = region_bid)) +
    geom_line(size=2)+
    facet_wrap(~isoalpha3, scales = 'free_y') +
   # labs(title = str_wrap(dat$label_es, 50), y = dat$valuetype) +
    theme(legend.position="bottom", 
          axis.title.y = element_text(color = "#000f1c", face = "bold", family = 'Century Gothic'),
          axis.title.x = element_blank(), 
          legend.title=element_blank(),panel.background = element_blank(),
          axis.text.x = element_text(angle = 90),
          axis.text = element_text(size = 14, color = "#000f1c", face = "bold", family = 'Century Gothic'),
          legend.text = element_text(size = 10, color = "#000f1c", face = "bold", family = 'Century Gothic'),
          text = element_text(size = 14, color = "#000f1c", face = "bold", family = 'Century Gothic')) +
    scale_color_manual(values = colors_regiones)+
    scale_y_continuous(labels = label_number(accuracy = .01))
  
  print(ggp_evo)
}

##### Gráfica género o una categoría con dos o tres niveles #####

ggfun_one <- function(dat, x.var, y.var, nivel) {
 
ggp_one <- ggplot(dat, aes(x = fct_reorder(x.var, y.var),  fill = nivel)) +
 geom_col(aes(y = y.var), position = "dodge") +
 geom_text(data = dat,
          aes(y =  y.var+.005, label = comma(y.var, accuracy = 0.1)),  
           family = 'Century Gothic', fontface = "bold", 
          position = position_dodge(width = .9), angle = 90) +
  labs(title = str_wrap(dat$label_es, 50), y = dat$valuetype) +
  theme(legend.position="bottom", 
        axis.title.y = element_text(color = "#000f1c", face = "bold", 
                                    family = 'Century Gothic'),
        axis.title.x = element_blank(), 
        legend.title=element_blank(),panel.background = element_blank(),
        axis.text.x = element_text(angle = 90),
        axis.text = element_text(size = 14, color = "#000f1c", face = "bold", 
                                 family = 'Century Gothic'),
        legend.text = element_text(size = 10, color = "#000f1c", face = "bold",
                                   family = 'Century Gothic'),
        text = element_text(size = 14, color = "#000f1c", face = "bold", 
                            family = 'Century Gothic')) +
  scale_fill_manual(values = colors_pal) +
  scale_y_continuous(labels = comma)
  
  print(ggp_one)
  
}

##### Cambios por edad  y promedio #####

ggfun_mul <- function(ggplot, dat){
  
ggp_mul<- ggplot +
  labs(title = str_wrap(dat$label_es, 50), y = dat$valuetype) +
    theme(legend.position="right",
          axis.title.y = element_text(color = "#000f1c", face = "bold", family = 'Century Gothic'),
          axis.title.x = element_blank(),
          legend.title=element_blank(),panel.background = element_blank(),
          axis.text.x = element_text(angle = 90),
          axis.text = element_text(size = 14, color = "#000f1c", face = "bold", family = 'Century Gothic'),
          legend.text = element_text(size = 10, color = "#000f1c", face = "bold", family = 'Century Gothic'),
          text = element_text(size = 14, color = "#000f1c", face = "bold", family = 'Century Gothic')) +
    scale_color_brewer(palette = "Purples") +
    scale_y_continuous(labels = comma) +
    scale_fill_manual(values = countries_color_prom) +
    geom_hline(yintercept = 0)
    
print(ggp_mul)

}
  
```
#  Diversidad

En esta sección se consideran los indicadores de diversidad. Se analizará si vale la pena incluirlo dependiendo del resultado del análisis. 

## Población afro e indígena

(pafro_ci) (pindi_ci) 

Me parece que esta variable puede no tener grandes cambios entre años, o no me imagino porque el COVID-19 la afectaría, pero se queda para análisis y al final se determina si se incluye.



<!--chapter:end:04-Diversidad.Rmd-->

```{r include=FALSE, cache=FALSE}
# Codigo general para graficar indicadores: funciones, leer antes de cada capítulo
# Autor: Maria Reyes Retana
# Divsion: SCL-SCL: Investigacion

##### Librerias #####

library(ggplot2)
library(tidyverse)
library(haven)
library(ggrepel)
library(extrafont)
library(Rttf2pt1)
library(geofacet)
library(scales)
library(RColorBrewer)
library(scldataR)
library(plotly)
library(dplyr)
library(purrr)

##### Preliminares y colores #####

colors_pal <- c('#17406D','#0F6FC6','#5FF3CB', '#009DD9','#FEA300', '#A5C249','#176A7B','#0BD0D9',
                '#10CF9B', '#FA5F00','#C8DA92','#CC0066')

barplot(rep(1,length(colors_pal)), col=colors_pal)

countries_color <- sample(colors_pal, 12, replace = FALSE)

countries_color_prom <- c("ARG"= "#17406D", "BOL" = "#17406D","CHL" = "#17406D",
                          "COL" = "#17406D", "CRI" = "#17406D", "ECU" = "#17406D",
                          "MEX" = "#17406D", "PER" = "#17406D", "PRY" = "#17406D", 
                          "SLV" = "#17406D", "Promedio" = "#009DD9", "BRA" = "#17406D")

# agregar región BID

paises <- query_indicator(indicator = 'pobreza', 
                          yearstart = 2019, 
                          yearend =  2020) %>% 
  select(isoalpha3) %>% 
  distinct() %>% 
  mutate(region_bid = case_when(isoalpha3 %in% c("ARG", "BRA", "PRY", "CHL", "URY") ~ "Cono Sur", 
                                isoalpha3 %in% c("BOL", "COL", "ECU", "PER", "VEN") ~ "Grupo Andino", 
                                isoalpha3 %in% c("BHS", "BRB", "GUY", "JAM", "SUR", "TTO") ~ "Caribe", 
                                isoalpha3 %in% c("HTI", "MEX", "PAN", "DOM", "BEL", "CRI", "SLV", "GTM", "HND", "NIC") ~ "Centroamerica", 
                                TRUE ~ "NO"))

colors_regiones <- sample(colors_pal, 5, replace = FALSE)

##### Función para generar promedios #####

grouped_mean <- function(.data, .summary_var, ...) {
  .summary_var <- enquo(.summary_var)
  
  .data %>%
    group_by(...) %>%
    mutate(value = mean(!!.summary_var)) %>% 
    mutate(isoalpha3 = "Promedio", 
           country_name_en = "Average", 
           country_name_es = "Promedio", 
           source = "scldata", 
           se = NA_character_, 
           cv = NA_character_, 
           sample = NA_character_, 
           source_es = "scldata", 
           source_en = 'scldata') %>% 
    arrange(source, year) %>% 
    distinct()
  
}

##### Función gráfica cambios promedios ya con datos #####

ggfun_prom <- function(dat,  x.var, y.var) 
  {
  ggp_prom <- ggplot(dat, aes(x = fct_reorder(x.var, y.var),  fill = x.var)) +
    geom_col(aes(y = y.var)) +
    geom_text(data = dat,
              aes(y =  y.var, label = comma(y.var, accuracy = 0.1)),  
              family = 'Century Gothic', fontface = "bold") +
    labs(title = str_wrap(dat$label_es, 50), y = dat$valuetype) +
    theme(legend.position="none", 
          axis.title.y = element_text(color = "#000f1c", face = "bold", family = 'Century Gothic'),
          axis.title.x = element_blank(), 
          legend.title=element_blank(),panel.background = element_blank(),
          axis.text.x = element_text(angle = 90),
          axis.text = element_text(size = 14, color = "#000f1c", face = "bold", family = 'Century Gothic'),
          legend.text = element_text(size = 10, color = "#000f1c", face = "bold", family = 'Century Gothic'),
          text = element_text(size = 14, color = "#000f1c", face = "bold", family = 'Century Gothic')) +
    scale_fill_manual(values = countries_color_prom)
  
  print(ggp_prom)
}

##### Cambios evolución general #####

ggfun_evo <- function(dat, x.var, y.var){
  ggp_evo <- ggplot(data = dat, aes(x = x.var, 
                                    y = y.var, 
                                    color = region_bid)) +
    geom_line(size=2)+
    facet_wrap(~isoalpha3, scales = 'free_y') +
   # labs(title = str_wrap(dat$label_es, 50), y = dat$valuetype) +
    theme(legend.position="bottom", 
          axis.title.y = element_text(color = "#000f1c", face = "bold", family = 'Century Gothic'),
          axis.title.x = element_blank(), 
          legend.title=element_blank(),panel.background = element_blank(),
          axis.text.x = element_text(angle = 90),
          axis.text = element_text(size = 14, color = "#000f1c", face = "bold", family = 'Century Gothic'),
          legend.text = element_text(size = 10, color = "#000f1c", face = "bold", family = 'Century Gothic'),
          text = element_text(size = 14, color = "#000f1c", face = "bold", family = 'Century Gothic')) +
    scale_color_manual(values = colors_regiones)+
    scale_y_continuous(labels = label_number(accuracy = .01))
  
  print(ggp_evo)
}

##### Gráfica género o una categoría con dos o tres niveles #####

ggfun_one <- function(dat, x.var, y.var, nivel) {
 
ggp_one <- ggplot(dat, aes(x = fct_reorder(x.var, y.var),  fill = nivel)) +
 geom_col(aes(y = y.var), position = "dodge") +
 geom_text(data = dat,
          aes(y =  y.var+.005, label = comma(y.var, accuracy = 0.1)),  
           family = 'Century Gothic', fontface = "bold", 
          position = position_dodge(width = .9), angle = 90) +
  labs(title = str_wrap(dat$label_es, 50), y = dat$valuetype) +
  theme(legend.position="bottom", 
        axis.title.y = element_text(color = "#000f1c", face = "bold", 
                                    family = 'Century Gothic'),
        axis.title.x = element_blank(), 
        legend.title=element_blank(),panel.background = element_blank(),
        axis.text.x = element_text(angle = 90),
        axis.text = element_text(size = 14, color = "#000f1c", face = "bold", 
                                 family = 'Century Gothic'),
        legend.text = element_text(size = 10, color = "#000f1c", face = "bold",
                                   family = 'Century Gothic'),
        text = element_text(size = 14, color = "#000f1c", face = "bold", 
                            family = 'Century Gothic')) +
  scale_fill_manual(values = colors_pal) +
  scale_y_continuous(labels = comma)
  
  print(ggp_one)
  
}

##### Cambios por edad  y promedio #####

ggfun_mul <- function(ggplot, dat){
  
ggp_mul<- ggplot +
  labs(title = str_wrap(dat$label_es, 50), y = dat$valuetype) +
    theme(legend.position="right",
          axis.title.y = element_text(color = "#000f1c", face = "bold", family = 'Century Gothic'),
          axis.title.x = element_blank(),
          legend.title=element_blank(),panel.background = element_blank(),
          axis.text.x = element_text(angle = 90),
          axis.text = element_text(size = 14, color = "#000f1c", face = "bold", family = 'Century Gothic'),
          legend.text = element_text(size = 10, color = "#000f1c", face = "bold", family = 'Century Gothic'),
          text = element_text(size = 14, color = "#000f1c", face = "bold", family = 'Century Gothic')) +
    scale_color_brewer(palette = "Purples") +
    scale_y_continuous(labels = comma) +
    scale_fill_manual(values = countries_color_prom) +
    geom_hline(yintercept = 0)
    
print(ggp_mul)

}
  
```
# Referencias

Reference items in your bibliography file(s) using `@key`.

Se utiliza el paquete de  **bookdown** package [@R-bookdown] (check out the last code chunk in index.Rmd to see how this citation key was added) in this sample book, which was built on top of R Markdown and **knitr** [@xie2015] (this citation was added manually in an external file book.bib). 
Note that the `.bib` files need to be listed in the index.Rmd with the YAML `bibliography` key.

Adicionalmente, se utiliza el paguete **scldataR** para realizar el query de los indicadores que a su vez utiliza la información disponible en scldata. 


The RStudio Visual Markdown Editor can also make it easier to insert citations: <https://rstudio.github.io/visual-markdown-editing/#/citations>

<!--chapter:end:05-Referencias.Rmd-->

